# DISTROTAREA2/docker-compose.yml
services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq_pokemon_lab
    ports: ["5672:5672", "15672:15672"]
    healthcheck: {test: ["CMD", "rabbitmqctl", "status"], interval: 10s, timeout: 5s, retries: 5}
    networks: [pokemon_network]

  lcp:
    build:
      context: . # Contexto es la raíz del proyecto (DISTROTAREA2)
      dockerfile: LCP/Dockerfile # Ruta al Dockerfile desde la raíz
    container_name: lcp_service
    ports: ["50051:50051"]
    depends_on: {rabbitmq: {condition: service_healthy}}
    environment: {RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"}
    networks: [pokemon_network]

  snp:
    build:
      context: .
      dockerfile: SNP/Dockerfile # Ruta al Dockerfile desde la raíz
    container_name: snp_service
    depends_on: {rabbitmq: {condition: service_healthy}, lcp: {condition: service_started}}
    environment: {RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"}
    networks: [pokemon_network]

  entrenador:
    build:
      context: .
      dockerfile: Entrenador/Dockerfile # Ruta al Dockerfile desde la raíz
    container_name: entrenador_client
    stdin_open: true
    tty: true
    depends_on: {rabbitmq: {condition: service_healthy}, lcp: {condition: service_started}}
    environment: {RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/", LCP_GRPC_ADDRESS: "lcp:50051"}
    networks: [pokemon_network]

networks:
  pokemon_network: {driver: bridge}