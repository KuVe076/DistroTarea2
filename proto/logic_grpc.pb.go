// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/logic.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LigaPokemon_ConsultarTorneosDisponibles_FullMethodName = "/proto.LigaPokemon/ConsultarTorneosDisponibles"
	LigaPokemon_InscribirEnTorneo_FullMethodName           = "/proto.LigaPokemon/InscribirEnTorneo"
)

// LigaPokemonClient is the client API for LigaPokemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// El servicio ContactarLCP lo renombraremos a LigaPokemon para seguir el PDF.
type LigaPokemonClient interface {
	ConsultarTorneosDisponibles(ctx context.Context, in *ConsultaTorneosReq, opts ...grpc.CallOption) (*ListaTorneosResp, error)
	InscribirEnTorneo(ctx context.Context, in *InscripcionTorneoReq, opts ...grpc.CallOption) (*ResultadoInscripcionResp, error)
}

type ligaPokemonClient struct {
	cc grpc.ClientConnInterface
}

func NewLigaPokemonClient(cc grpc.ClientConnInterface) LigaPokemonClient {
	return &ligaPokemonClient{cc}
}

func (c *ligaPokemonClient) ConsultarTorneosDisponibles(ctx context.Context, in *ConsultaTorneosReq, opts ...grpc.CallOption) (*ListaTorneosResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaTorneosResp)
	err := c.cc.Invoke(ctx, LigaPokemon_ConsultarTorneosDisponibles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligaPokemonClient) InscribirEnTorneo(ctx context.Context, in *InscripcionTorneoReq, opts ...grpc.CallOption) (*ResultadoInscripcionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultadoInscripcionResp)
	err := c.cc.Invoke(ctx, LigaPokemon_InscribirEnTorneo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LigaPokemonServer is the server API for LigaPokemon service.
// All implementations must embed UnimplementedLigaPokemonServer
// for forward compatibility.
//
// El servicio ContactarLCP lo renombraremos a LigaPokemon para seguir el PDF.
type LigaPokemonServer interface {
	ConsultarTorneosDisponibles(context.Context, *ConsultaTorneosReq) (*ListaTorneosResp, error)
	InscribirEnTorneo(context.Context, *InscripcionTorneoReq) (*ResultadoInscripcionResp, error)
	mustEmbedUnimplementedLigaPokemonServer()
}

// UnimplementedLigaPokemonServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLigaPokemonServer struct{}

func (UnimplementedLigaPokemonServer) ConsultarTorneosDisponibles(context.Context, *ConsultaTorneosReq) (*ListaTorneosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarTorneosDisponibles not implemented")
}
func (UnimplementedLigaPokemonServer) InscribirEnTorneo(context.Context, *InscripcionTorneoReq) (*ResultadoInscripcionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InscribirEnTorneo not implemented")
}
func (UnimplementedLigaPokemonServer) mustEmbedUnimplementedLigaPokemonServer() {}
func (UnimplementedLigaPokemonServer) testEmbeddedByValue()                     {}

// UnsafeLigaPokemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LigaPokemonServer will
// result in compilation errors.
type UnsafeLigaPokemonServer interface {
	mustEmbedUnimplementedLigaPokemonServer()
}

func RegisterLigaPokemonServer(s grpc.ServiceRegistrar, srv LigaPokemonServer) {
	// If the following call pancis, it indicates UnimplementedLigaPokemonServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LigaPokemon_ServiceDesc, srv)
}

func _LigaPokemon_ConsultarTorneosDisponibles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsultaTorneosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigaPokemonServer).ConsultarTorneosDisponibles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LigaPokemon_ConsultarTorneosDisponibles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigaPokemonServer).ConsultarTorneosDisponibles(ctx, req.(*ConsultaTorneosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LigaPokemon_InscribirEnTorneo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InscripcionTorneoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigaPokemonServer).InscribirEnTorneo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LigaPokemon_InscribirEnTorneo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigaPokemonServer).InscribirEnTorneo(ctx, req.(*InscripcionTorneoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LigaPokemon_ServiceDesc is the grpc.ServiceDesc for LigaPokemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LigaPokemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LigaPokemon",
	HandlerType: (*LigaPokemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsultarTorneosDisponibles",
			Handler:    _LigaPokemon_ConsultarTorneosDisponibles_Handler,
		},
		{
			MethodName: "InscribirEnTorneo",
			Handler:    _LigaPokemon_InscribirEnTorneo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logic.proto",
}
