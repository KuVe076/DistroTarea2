// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/logic.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContactarLCP_ConsultarTorneosDisponibles_FullMethodName = "/proto.ContactarLCP/ConsultarTorneosDisponibles"
	ContactarLCP_InscribirTorneo_FullMethodName             = "/proto.ContactarLCP/InscribirTorneo"
)

// ContactarLCPClient is the client API for ContactarLCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactarLCPClient interface {
	// El entrenador consulta los torneos disponibles
	ConsultarTorneosDisponibles(ctx context.Context, in *TorneosRequest, opts ...grpc.CallOption) (*TorneosResponse, error)
	// El entrenador intenta inscribirse en un torneo específico
	InscribirTorneo(ctx context.Context, in *InscripcionRequest, opts ...grpc.CallOption) (*InscripcionResponse, error)
}

type contactarLCPClient struct {
	cc grpc.ClientConnInterface
}

func NewContactarLCPClient(cc grpc.ClientConnInterface) ContactarLCPClient {
	return &contactarLCPClient{cc}
}

func (c *contactarLCPClient) ConsultarTorneosDisponibles(ctx context.Context, in *TorneosRequest, opts ...grpc.CallOption) (*TorneosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TorneosResponse)
	err := c.cc.Invoke(ctx, ContactarLCP_ConsultarTorneosDisponibles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactarLCPClient) InscribirTorneo(ctx context.Context, in *InscripcionRequest, opts ...grpc.CallOption) (*InscripcionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InscripcionResponse)
	err := c.cc.Invoke(ctx, ContactarLCP_InscribirTorneo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactarLCPServer is the server API for ContactarLCP service.
// All implementations must embed UnimplementedContactarLCPServer
// for forward compatibility.
type ContactarLCPServer interface {
	// El entrenador consulta los torneos disponibles
	ConsultarTorneosDisponibles(context.Context, *TorneosRequest) (*TorneosResponse, error)
	// El entrenador intenta inscribirse en un torneo específico
	InscribirTorneo(context.Context, *InscripcionRequest) (*InscripcionResponse, error)
	mustEmbedUnimplementedContactarLCPServer()
}

// UnimplementedContactarLCPServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContactarLCPServer struct{}

func (UnimplementedContactarLCPServer) ConsultarTorneosDisponibles(context.Context, *TorneosRequest) (*TorneosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarTorneosDisponibles not implemented")
}
func (UnimplementedContactarLCPServer) InscribirTorneo(context.Context, *InscripcionRequest) (*InscripcionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InscribirTorneo not implemented")
}
func (UnimplementedContactarLCPServer) mustEmbedUnimplementedContactarLCPServer() {}
func (UnimplementedContactarLCPServer) testEmbeddedByValue()                      {}

// UnsafeContactarLCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactarLCPServer will
// result in compilation errors.
type UnsafeContactarLCPServer interface {
	mustEmbedUnimplementedContactarLCPServer()
}

func RegisterContactarLCPServer(s grpc.ServiceRegistrar, srv ContactarLCPServer) {
	// If the following call pancis, it indicates UnimplementedContactarLCPServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContactarLCP_ServiceDesc, srv)
}

func _ContactarLCP_ConsultarTorneosDisponibles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TorneosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactarLCPServer).ConsultarTorneosDisponibles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactarLCP_ConsultarTorneosDisponibles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactarLCPServer).ConsultarTorneosDisponibles(ctx, req.(*TorneosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactarLCP_InscribirTorneo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InscripcionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactarLCPServer).InscribirTorneo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactarLCP_InscribirTorneo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactarLCPServer).InscribirTorneo(ctx, req.(*InscripcionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactarLCP_ServiceDesc is the grpc.ServiceDesc for ContactarLCP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactarLCP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ContactarLCP",
	HandlerType: (*ContactarLCPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsultarTorneosDisponibles",
			Handler:    _ContactarLCP_ConsultarTorneosDisponibles_Handler,
		},
		{
			MethodName: "InscribirTorneo",
			Handler:    _ContactarLCP_InscribirTorneo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logic.proto",
}
