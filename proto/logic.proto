syntax = "proto3";

package proto;

option go_package = "DISTROTAREA2/proto";

// --- Servicio de la Liga Pokemon para Entrenadores ---
service LigaPokemon {
    rpc ConsultarTorneosDisponibles(ConsultaTorneosReq) returns (ListaTorneosResp);
    rpc InscribirEnTorneo(InscripcionTorneoReq) returns (ResultadoInscripcionResp);
}

message Torneo { 
    string id = 1; 
    string region = 2; 
}

message ConsultaTorneosReq {
     string solicitante_info = 1; 
}
message ListaTorneosResp { 
    repeated Torneo torneos = 1; 
}
message InscripcionTorneoReq {
    string torneo_id = 1;
    string entrenador_id = 2;
    string entrenador_nombre = 3;
    string entrenador_region = 4;
}

enum RazonRechazo {
    RAZON_NO_ESPECIFICADA = 0; 
    RECHAZO_SUSPENDIDO = 1; 
    RECHAZO_YA_INSCRITO_EN_OTRO_TORNEO = 2;
    RECHAZO_TORNEO_NO_EXISTE = 3; 
    RECHAZO_ENTRENADOR_EXPULSADO = 4; 
    RECHAZO_TORNEO_REGION_INCORRECTA = 5;
}
message ResultadoInscripcionResp {
    bool exito = 1; 
    string mensaje = 2; 
    string torneo_id_confirmado = 3;
    int32 nueva_suspension_entrenador = 4; 
    string nuevo_estado_entrenador = 5; 
    RazonRechazo razon_rechazo = 6;
}

// --- Servicio del Gimnasio Regional para LCP ---
service Gimnasio {
    rpc AsignarCombate(AsignarCombateRequest) returns (AsignarCombateResponse);
}

message EntrenadorInfo { // Renombrado para posible claridad si ya tienes otro EntrenadorInfo
    string id = 1;
    string name = 2;    // Para generar el campo 'Name' en Go, como usa tu gym.go
    int32 ranking = 3;
}

message AsignarCombateRequest {
    string combate_id = 1;
    string torneo_id = 2;
    EntrenadorInfo entrenador_1 = 3; // Usando EntrenadorInfo
    EntrenadorInfo entrenador_2 = 4; // Usando EntrenadorInfo
    string region = 5;             // Para coincidir con req.Region en tu gym.go
}

message AsignarCombateResponse { // Aseg√∫rate que el nombre coincida con lo que gym.go devuelve
    bool aceptado = 1;
    string mensaje = 2;
}